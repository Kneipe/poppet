user www-data;
worker_processes 4;
pid /run/nginx.pid;

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;
	#gzip_disable "msie6";

	 # Enable compression both for HTTP/1.0 and HTTP/1.1.
	  gzip_http_version  1.1;

	  # Compression level (1-9).
	  # 5 is a perfect compromise between size and cpu usage, offering about
	  # 75% reduction for most ascii files (almost identical to level 9).
	  gzip_comp_level    5;

	  # Don't compress anything that's already small and unlikely to shrink much
	  # if at all (the default is 20 bytes, which is bad as that usually leads to
	  # larger files after gzipping).
	  gzip_min_length    256;

	  # Compress data even for clients that are connecting to us via proxies,
	  # identified by the "Via" header (required for CloudFront).
	  gzip_proxied       any;

	  # Tell proxies to cache both the gzipped and regular version of a resource
	  # whenever the client's Accept-Encoding capabilities header varies;
	  # Avoids the issue where a non-gzip capable client (which is extremely rare
	  # today) would display gibberish if their proxy gave them the gzipped version.
	  gzip_vary          on;

	  # Compress all output labeled with one of the following MIME-types.
	  gzip_types
	    application/atom+xml
	    application/javascript
	    application/json
	    application/rss+xml
	    application/vnd.ms-fontobject
	    application/x-font-ttf
	    application/x-web-app-manifest+json
	    application/xhtml+xml
	    application/xml
	    font/opentype
	    image/svg+xml
	    image/x-icon
	    text/css
	    text/plain
	    text/x-component;
	  # text/html is always compressed by HttpGzipModule

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# nginx-naxsi config
	##
	# Uncomment it if you installed nginx-naxsi
	##

	#include /etc/nginx/naxsi_core.rules;

	##
	# nginx-passenger config
	##
	# Uncomment it if you installed nginx-passenger
	##
	
	#passenger_root /usr;
	#passenger_ruby /usr/bin/ruby;

	##
	# Virtual Host Configs
	##
log_format rt_cache '$remote_addr - $upstream_cache_status [$time_local]  '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';
log_format upstreamlog '[$time_local] $remote_addr - $remote_user - $server_name  to: $upstream_addr: $request upstream_response_time $upstream_response_time msec $msec request_time $request_time';
resolver                   8.8.8.8 valid=300s;
  resolver_timeout           10s;proxy_cache_path           /tmp/cache levels=1:2 keys_zone=S3_CACHE:10m inactive=48h max_size=1000m;
  proxy_temp_path            /tmp/cache/temp;
	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
  # Upstream to abstract back-end connection(s) for PHP
      upstream php {
      server unix:/var/run/php5-fpm.sock;
  }

                    
  upstream s3 {
    server                   'unifispot.s3-eu-central-1.amazonaws.com:80';
    keepalive                10;
  }

}


